version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:13
    container_name: production_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-production_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - sync_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # StarRocks Frontend
  starrocks-fe:
    image: starrocks/fe-ubuntu:latest
    container_name: production_starrocks_fe
    environment:
      META_SERVICE_ENDPOINT: starrocks-be:9060
      STARROCKS_ROOT_PASSWORD: ${STARROCKS_PASSWORD:-root}
    ports:
      - "8030:8030"  # HTTP port
      - "9020:9020"  # RPC port
    depends_on:
      - starrocks-be
    networks:
      - sync_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8030/api/bootstrap"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # StarRocks Backend
  starrocks-be:
    image: starrocks/be-ubuntu:latest
    container_name: production_starrocks_be
    environment:
      STARROCKS_ROOT_PASSWORD: ${STARROCKS_PASSWORD:-root}
    ports:
      - "9060:9060"  # RPC port
      - "8040:8040"  # HTTP port
    volumes:
      - starrocks_data:/opt/starrocks/be/storage
    networks:
      - sync_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8040/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Flink JobManager
  flink-jobmanager:
    image: flink:1.16-scala_2.12
    container_name: production_flink_jobmanager
    command: jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        taskmanager.numberOfTaskSlots: 8
        parallelism.default: 8
        jobmanager.memory.process.size: 2048m
        taskmanager.memory.process.size: 4096m
        execution.checkpointing.interval: 30000
        execution.checkpointing.timeout: 600000
        execution.checkpointing.min-pause: 10000
        execution.checkpointing.max-concurrent-checkpoints: 2
        execution.checkpointing.mode: EXACTLY_ONCE
        restart-strategy: exponential-delay
        restart-strategy.exponential-delay.attempts: 5
        restart-strategy.exponential-delay.initial-backoff: 10000
        restart-strategy.exponential-delay.max-backoff: 300000
        restart-strategy.exponential-delay.backoff-multiplier: 2.0
    ports:
      - "8081:8081"
    networks:
      - sync_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/overview"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Flink TaskManager
  flink-taskmanager:
    image: flink:1.16-scala_2.12
    container_name: production_flink_taskmanager
    command: taskmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        taskmanager.numberOfTaskSlots: 8
        parallelism.default: 8
        jobmanager.memory.process.size: 2048m
        taskmanager.memory.process.size: 4096m
        execution.checkpointing.interval: 30000
        execution.checkpointing.timeout: 600000
        execution.checkpointing.min-pause: 10000
        execution.checkpointing.max-concurrent-checkpoints: 2
        execution.checkpointing.mode: EXACTLY_ONCE
        restart-strategy: exponential-delay
        restart-strategy.exponential-delay.attempts: 5
        restart-strategy.exponential-delay.initial-backoff: 10000
        restart-strategy.exponential-delay.max-backoff: 300000
        restart-strategy.exponential-delay.backoff-multiplier: 2.0
    depends_on:
      - flink-jobmanager
    networks:
      - sync_network
    deploy:
      replicas: 2

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: production_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - sync_network

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: production_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - sync_network

  # Sync Application
  sync-app:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    container_name: production_sync_app
    environment:
      # Database Configuration
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-production_db}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      
      # StarRocks Configuration
      - STARROCKS_HOST=starrocks-fe
      - STARROCKS_PORT=8030
      - STARROCKS_DB=${STARROCKS_DB:-production_db}
      - STARROCKS_USER=${STARROCKS_USER:-root}
      - STARROCKS_PASSWORD=${STARROCKS_PASSWORD:-root}
      
      # Flink Configuration
      - FLINK_JOBMANAGER_HOST=flink-jobmanager
      - FLINK_JOBMANAGER_PORT=8081
      - FLINK_PARALLELISM=8
      
      # Monitoring Configuration
      - METRICS_PORT=9090
      - HEALTH_CHECK_PORT=8080
      
      # Logging Configuration
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_JSON_FORMAT=true
      - LOG_STRUCTURED=true
      
      # Security Configuration
      - SENTRY_DSN=${SENTRY_DSN:-}
      - ENVIRONMENT=production
      
      # Alerting Configuration
      - ALERT_WEBHOOK_URL=${ALERT_WEBHOOK_URL:-}
      - SLACK_WEBHOOK=${SLACK_WEBHOOK:-}
      
    depends_on:
      postgres:
        condition: service_healthy
      starrocks-fe:
        condition: service_healthy
      flink-jobmanager:
        condition: service_healthy
    networks:
      - sync_network
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

  # Redis for Caching (Optional)
  redis:
    image: redis:7-alpine
    container_name: production_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - sync_network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  starrocks_data:
  prometheus_data:
  grafana_data:
  redis_data:

networks:
  sync_network:
    driver: bridge
